name: .NET Core Desktop - Release to GitHub

on:
  push:
    branches:
      - master

jobs:
  build-and-release:
    runs-on: windows-latest

    steps:
      # Checkout kodu
      - name: Checkout code
        uses: actions/checkout@v4

      # Zainstalowanie .NET
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      # Instalacja MSBuild
      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2

      # Restore dependencies
      - name: Restore dependencies
        run: msbuild GenshinWishCounter1.5.sln /t:Restore /p:Configuration=Release

      # Build aplikacji z debugowaniem ścieżki
      - name: Build solution
        run: |
          msbuild GenshinWishCounter1.5.sln /p:Configuration=Release /p:OutputPath=${{ github.workspace }}/build_output
          echo "Listing build_output contents:"
          Get-ChildItem -Path "${{ github.workspace }}/build_output" -Recurse
        shell: pwsh

      # Tworzenie pliku ZIP
      - name: Create ZIP file
        run: |
          $outputPath = "${{ github.workspace }}\GenshinWishCounter_Release.zip"
          $inputPath = "${{ github.workspace }}\build_output\*"
          if (Test-Path $inputPath) {
            Compress-Archive -Path $inputPath -DestinationPath $outputPath
          } else {
            Write-Error "Input path does not exist: $inputPath"
          }
        shell: pwsh

      # Tworzenie GitHub Release
      - name: Create GitHub Release
        id: create_release  # ID kroku, potrzebne do pobrania upload_url
        uses: actions/create-release@v1
        with:
          tag_name: v1.0.${{ github.run_number }}
          release_name: "Release v1.0.${{ github.run_number }}"
          body: |
            Automatyczne wydanie dla aplikacji Genshin Wish Counter.
            Plik zawiera build w konfiguracji Release.
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Dodanie pliku ZIP do wydania
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ github.workspace }}/GenshinWishCounter_Release.zip
          asset_name: GenshinWishCounter_Release.zip
          asset_content_type: application/zip
